{"version":3,"sources":["assets/mic.png","assets/logo.gif","reducer.ts","Components/Item/Item.tsx","Components/Items/Items.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx","assets/prikolnoe-chavkane.mp3"],"names":["module","exports","initialState","counter","items","randomIndex","speed","ConnectedItem","connect","state","dispatch","incCounter","type","incCounterAC","changeSpeed","changeSpeedAC","props","classChanged","item","className","onClick","Audio","audio","play","src","mic","ConnectedItems","gameItems","map","key","id","ConnectedApp","makeRandomInd","makeRandomIndexAC","useEffect","setInterval","Math","floor","random","length","clearInterval","logo","alt","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,+MCYrCC,EAAsB,CACxBC,QAAS,EACTC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCC,YAAa,EACbC,MAAO,K,OCwBX,IAsBeC,EADOC,aArBE,SAACC,GACrB,MAAO,CACHN,QAASM,EAAMN,QACfC,MAAOK,EAAML,MACbC,YAAaI,EAAMJ,YACnBC,MAAOG,EAAMH,UAKM,SAACI,GACxB,MAAM,CACFC,WAAY,SAACR,GACTO,EDLgB,SAACP,GAAD,MAAsC,CAACS,KAhDxC,cAgD2DT,WCKjEU,CAAaV,KAE1BW,YAAa,SAACR,GACVI,EDGiB,SAACJ,GAAD,MAAqC,CAACM,KAzDvC,eAyD2DN,SCHlES,CAAcT,QAKbE,EA5CtB,SAAcQ,GAOV,IAAIC,EAAeD,EAAME,OAASF,EAAMX,YAAc,OAAS,QAC/D,OACI,yBAAKc,UAAW,QACZ,yBACIC,QATZ,WACI,IAAIC,MAAMC,KAAOC,OACjBP,EAAML,WAAWK,EAAMb,SACvBa,EAAMF,YAAYE,EAAMV,MAAQ,KAOxBa,UAAWF,EACXO,IAAKC,UCPrB,IAQeC,EADQlB,aAPC,SAACC,GACrB,MAAM,CACFL,MAAOK,EAAML,SAK2B,KAAzBI,EApBvB,SAAeQ,GAGX,IAAIW,EAAYX,EAAMZ,MAAMwB,KAAI,SAACV,GAAD,OAC5B,kBAAC,EAAD,CAAMW,IAAKX,EAAKY,GAAIZ,KAAMA,OAC9B,OACI,yBAAKC,UAAU,aACEQ,M,iBCyBzB,IAoBeI,EADMvB,aAnBG,SAACC,GACrB,MAAO,CACHN,QAASM,EAAMN,QACfC,MAAOK,EAAML,MACbC,YAAaI,EAAMJ,YACnBC,MAAOG,EAAMH,UAGM,SAACI,GACxB,MAAO,CAEHsB,cAAe,SAAC3B,GACZK,EHDqB,SAACL,GAAD,MAA+C,CAACO,KApDhD,oBAoDyEP,eGCrF4B,CAAkB5B,QAOlBG,EA9CrB,SAAaQ,GAeT,OATAkB,qBAAU,WACN,IAAMJ,EAAKK,aAAY,WAJvBnB,EAAMgB,cAAcI,KAAKC,MAAMD,KAAKE,SAAWtB,EAAMZ,MAAMmC,WAMxDvB,EAAMV,OACT,OAAO,kBAAMkC,cAAcV,MAC5B,CAACd,EAAMX,cAKN,yBAAKc,UAAU,OACX,yBAAKK,IAAKiB,IAAMC,IAAI,SACpB,8BAAO1B,EAAMb,SACb,yBAAKgB,UAAW,aACZ,kBAAC,EAAD,CAAOf,MAAOY,EAAMZ,aCvBhBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCbSC,EADDC,aLiBS,WAAgD,IAA/CxC,EAA8C,uDAAtCP,EAAcgD,EAAwB,uCAClE,OAAQA,EAAOtC,MACX,IAvBmB,cAwBf,OAAO,eACAH,EADP,CAEIN,QAAS+C,EAAO/C,QAAU,IAElC,IA3ByB,oBA4BrB,OAAO,eACAM,EADP,CAEIJ,YAAa6C,EAAO7C,cAE5B,IA/BoB,eAgChB,OAAO,eACAI,EADP,CAEIH,MAAO4C,EAAO5C,QAEtB,QACI,OAAOG,MM9BnB0C,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGzI5BhE,EAAOC,QAAU,IAA0B,iD","file":"static/js/main.393418ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mic.ebd22e58.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.9a80272f.gif\";","export const INC_COUNTER = 'INC_COUNTER';\r\nexport const MAKE_RANDOM_INDEX = 'MAKE_RANDOM_INDEX';\r\nexport const CHANGE_SPEED = 'CHANGE_SPEED';\r\n\r\n\r\nexport type State = {\r\n    counter: number,\r\n    items: number[],\r\n    randomIndex: number,\r\n    speed: number\r\n}\r\n\r\nconst initialState: State = {\r\n    counter: 0,\r\n    items: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n    randomIndex: 3,\r\n    speed: 1000\r\n}\r\n\r\ntype ActionTypes = IncCounterType | MakeRandomIndexType | ChangeSpeedType\r\n\r\nexport const reducer = (state = initialState, action: ActionTypes) => { //??\r\n    switch (action.type) {\r\n        case INC_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.counter + 1\r\n            }\r\n        case MAKE_RANDOM_INDEX:\r\n            return {\r\n                ...state,\r\n                randomIndex: action.randomIndex\r\n            }\r\n        case CHANGE_SPEED:\r\n            return {\r\n                ...state,\r\n                speed: action.speed\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport type IncCounterType = {\r\n    type: typeof INC_COUNTER\r\n    counter: number\r\n}\r\nexport const incCounterAC = (counter: number): IncCounterType => ({type: INC_COUNTER, counter})\r\nexport type MakeRandomIndexType = {\r\n    type: typeof MAKE_RANDOM_INDEX\r\n    randomIndex: number\r\n}\r\nexport const makeRandomIndexAC = (randomIndex: number): MakeRandomIndexType => ({type: MAKE_RANDOM_INDEX, randomIndex})\r\n\r\nexport type ChangeSpeedType = {\r\n    type: typeof CHANGE_SPEED\r\n    speed: number\r\n}\r\nexport const changeSpeedAC = (speed: number): ChangeSpeedType => ({type: CHANGE_SPEED, speed})","// @ts-ignore\nimport audio from '../../assets/prikolnoe-chavkane.mp3';\nimport React from 'react';\nimport mic from '../../assets/mic.png';\nimport {changeSpeedAC, incCounterAC, State} from \"../../reducer\";\nimport {connect} from \"react-redux\";\n\n\ntype PropsType = {\n    counter: number,\n    item: number,\n    randomIndex: number,\n    speed: number,\n    incCounter: (counter: number) => void\n    changeSpeed: (speed: number) => void\n}\n\nfunction Item(props: PropsType) {\n\n    function onClickUp ()  {\n        new Audio(audio).play()\n        props.incCounter(props.counter);\n        props.changeSpeed(props.speed - 10)\n    }\n    let classChanged = props.item === props.randomIndex ? 'show' : 'photo'\n    return (\n        <div className={'item'}>\n            <img\n                onClick={onClickUp}\n                className={classChanged}\n                src={mic}\n            />\n        </div>\n    );\n}\n\n\n\n\n\nconst mapStateToProps = (state: State) => {\n    return {\n        counter: state.counter,\n        items: state.items,\n        randomIndex: state.randomIndex,\n        speed: state.speed\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Function) => {\n    return{\n        incCounter: (counter: number) =>{\n            dispatch(incCounterAC(counter));\n        },\n        changeSpeed: (speed: number) => {\n            dispatch(changeSpeedAC(speed));\n        }\n    }\n}\n\nconst ConnectedItem = connect(mapStateToProps, mapDispatchToProps)(Item)\nexport default ConnectedItem;\n","import React from 'react';\nimport Item from \"../Item/Item\";\nimport {connect} from \"react-redux\";\nimport {State} from \"../../reducer\";\n\n\ntype PropsType = {\n    items: number[],\n}\n\nfunction Items(props: PropsType) {\n\n\n    let gameItems = props.items.map((item: any) =>\n        <Item key={item.id} item={item} />)\n    return (\n        <div className='container'>\n                        {gameItems}\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state: State) => {\n    return{\n        items: state.items,\n    }\n\n}\n\nconst ConnectedItems = connect(mapStateToProps, null)(Items)\nexport default ConnectedItems;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Items from \"./Components/Items/Items\";\nimport logo from \"./assets/logo.gif\";\nimport {connect} from \"react-redux\";\nimport {changeSpeedAC, incCounterAC, makeRandomIndexAC, State} from \"./reducer\";\n\ntype PropsType = {\n    counter: number,\n    items: number[],\n    randomIndex: number,\n    speed: number\n    makeRandomInd: (randomIndex: number) => void\n}\n\nfunction App(props: PropsType) {\n\n    function makeRandomIndex() {\n        props.makeRandomInd(Math.floor(Math.random() * props.items.length))\n    }\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            makeRandomIndex()\n        }, props.speed);\n        return () => clearInterval(id);\n    }, [props.randomIndex]);\n\n\n\n    return (\n        <div className=\"App\">\n            <img src={logo} alt=\"logo\"/>\n            <span>{props.counter}</span>\n            <div className={'container'}>\n                <Items items={props.items}/>\n            </div>\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state: State) => {\n    return {\n        counter: state.counter,\n        items: state.items,\n        randomIndex: state.randomIndex,\n        speed: state.speed\n    }\n}\nconst mapDispatchToProps = (dispatch: Function) => {\n    return {\n\n        makeRandomInd: (randomIndex: number) => {\n            dispatch(makeRandomIndexAC(randomIndex));\n        },\n    }\n\n}\n\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\n\r\n\r\nconst store = createStore(reducer)\r\nexport default store;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/prikolnoe-chavkane.fc3397be.mp3\";"],"sourceRoot":""}